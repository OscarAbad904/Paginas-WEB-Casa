// piece.js — definición de tetrominós, rotación SRS, bolsa 7-bag
import { shuffle } from './utils.js';

export const Kinds = { I:1,O:2,T:3,S:4,Z:5,J:6,L:7 };
export const KIND_LIST = [Kinds.I,Kinds.O,Kinds.T,Kinds.S,Kinds.Z,Kinds.J,Kinds.L];

// Matrices 4x4 (16 celdas) por rotación (0,1,2,3). 1 = bloque.
const R = {
  [Kinds.I]: [
    [0,0,0,0, 1,1,1,1, 0,0,0,0, 0,0,0,0],
    [0,0,1,0, 0,0,1,0, 0,0,1,0, 0,0,1,0],
    [0,0,0,0, 1,1,1,1, 0,0,0,0, 0,0,0,0],
    [0,0,1,0, 0,0,1,0, 0,0,1,0, 0,0,1,0],
  ],
  [Kinds.O]: [
    [0,1,1,0, 0,1,1,0, 0,0,0,0, 0,0,0,0],
    [0,1,1,0, 0,1,1,0, 0,0,0,0, 0,0,0,0],
    [0,1,1,0, 0,1,1,0, 0,0,0,0, 0,0,0,0],
    [0,1,1,0, 0,1,1,0, 0,0,0,0, 0,0,0,0],
  ],
  [Kinds.T]: [
    [0,1,0,0, 1,1,1,0, 0,0,0,0, 0,0,0,0],
    [0,1,0,0, 0,1,1,0, 0,1,0,0, 0,0,0,0],
    [0,0,0,0, 1,1,1,0, 0,1,0,0, 0,0,0,0],
    [0,1,0,0, 1,1,0,0, 0,1,0,0, 0,0,0,0],
  ],
  [Kinds.S]: [
    [0,1,1,0, 1,1,0,0, 0,0,0,0, 0,0,0,0],
    [0,1,0,0, 0,1,1,0, 0,0,1,0, 0,0,0,0],
    [0,0,0,0, 0,1,1,0, 1,1,0,0, 0,0,0,0],
    [1,0,0,0, 1,1,0,0, 0,1,0,0, 0,0,0,0],
  ],
  [Kinds.Z]: [
    [1,1,0,0, 0,1,1,0, 0,0,0,0, 0,0,0,0],
    [0,0,1,0, 0,1,1,0, 0,1,0,0, 0,0,0,0],
    [0,0,0,0, 1,1,0,0, 0,1,1,0, 0,0,0,0],
    [0,1,0,0, 1,1,0,0, 1,0,0,0, 0,0,0,0],
  ],
  [Kinds.J]: [
    [1,0,0,0, 1,1,1,0, 0,0,0,0, 0,0,0,0],
    [0,1,1,0, 0,1,0,0, 0,1,0,0, 0,0,0,0],
    [0,0,0,0, 1,1,1,0, 0,0,1,0, 0,0,0,0],
    [0,1,0,0, 0,1,0,0, 1,1,0,0, 0,0,0,0],
  ],
  [Kinds.L]: [
    [0,0,1,0, 1,1,1,0, 0,0,0,0, 0,0,0,0],
    [0,1,0,0, 0,1,0,0, 0,1,1,0, 0,0,0,0],
    [0,0,0,0, 1,1,1,0, 1,0,0,0, 0,0,0,0],
    [1,1,0,0, 0,1,0,0, 0,1,0,0, 0,0,0,0],
  ],
};

// SRS wall kicks (Guideline). Para JLSTZ y T:
const KICKS_JLSTZ = {
  "0>1":[[0,0],[-1,0],[-1,1],[0,-2],[-1,-2]],
  "1>0":[[0,0],[1,0],[1,-1],[0,2],[1,2]],
  "1>2":[[0,0],[1,0],[1,-1],[0,2],[1,2]],
  "2>1":[[0,0],[-1,0],[-1,1],[0,-2],[-1,-2]],
  "2>3":[[0,0],[1,0],[1,1],[0,-2],[1,-2]],
  "3>2":[[0,0],[-1,0],[-1,-1],[0,2],[-1,2]],
  "3>0":[[0,0],[-1,0],[-1,-1],[0,2],[-1,2]],
  "0>3":[[0,0],[1,0],[1,1],[0,-2],[1,-2]],
};
// SRS para I:
const KICKS_I = {
  "0>1":[[0,0],[-2,0],[1,0],[-2,-1],[1,2]],
  "1>0":[[0,0],[2,0],[-1,0],[2,1],[-1,-2]],
  "1>2":[[0,0],[-1,0],[2,0],[-1,2],[2,-1]],
  "2>1":[[0,0],[1,0],[-2,0],[1,-2],[-2,1]],
  "2>3":[[0,0],[2,0],[-1,0],[2,1],[-1,-2]],
  "3>2":[[0,0],[-2,0],[1,0],[-2,-1],[1,2]],
  "3>0":[[0,0],[1,0],[-2,0],[1,-2],[-2,1]],
  "0>3":[[0,0],[-1,0],[2,0],[-1,2],[2,-1]],
};

export function rotationMatrix(kind, rot) {
  return R[kind][rot & 3];
}

// Generador 7-bag
export function* bagGenerator() {
  const buf = [];
  for(;;){
    if (buf.length < 7) {
      const newBag = shuffle([...KIND_LIST]);
      buf.push(...newBag);
    }
    yield buf.shift();
  }
}

// Spawn inicial (x centrado, y=-2 para filas ocultas)
export function spawn(kind) {
  return { kind, rot:0, x:3, y:-2 }; // 4x4 bbox
}

// Kicks para transición from->to
export function kicks(kind, from, to) {
  if (kind === Kinds.O) return [[0,0]]; // O no usa kicks
  const k = `${from&3}>${to&3}`;
  return (kind === Kinds.I ? KICKS_I[k] : KICKS_JLSTZ[k]) || [[0,0]];
}
